apply plugin: 'com.android.application'
apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.7.9"
}

android {
    compileSdkVersion 26
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.weex.jasso"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.0.2'
    compile 'org.jacoco:org.jacoco.core:0.7.9'
    compile 'com.android.support.constraint:constraint-layout:+'
//    testCompile 'junit:junit:4.12'
//    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.4.0'
}

def coverageSourceDirs = [
        '../app/src/main/java'
]

task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }
    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories = files(coverageSourceDirs)
    executionData = files("$buildDir/outputs/code-coverage/connected/coverage.ec")

    doFirst {
        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}


//task preJacocoTestReport(type: Exec) {
//    executable 'sh'
//    args "jacoco.sh"
//}


//task jacocoTestReport(type: JacocoReport,dependsOn: preJacocoTestReport) {
//
//    group = "Reporting"
//    description = "Generate Jacoco coverage reports after running tests."
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//
//
//    def coverageSourceDirs = [
//            '../app/src/main/java'
//    ]
//
//    def excludeClasses = ['**/R*.class',
//                          '**/*$InjectAdapter.class',
//                          '**/*$ModuleAdapter.class',
//                          '**/*$ViewInjector*.class',
//                          '**/BuildConfig.class'
//    ]
//
//    classDirectories = fileTree(dir: '../app/build/intermediates/classes/debug',excludes: excludeClasses)
//
//    sourceDirectories = files(coverageSourceDirs)
//    executionData = files("$buildDir/outputs/code-coverage/connected/coverage.ec")
//
//    doFirst {
//        new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
//            if (file.name.contains('$$')) {
//                file.renameTo(file.path.replace('$$', '$'))
//            }
//        }
//    }
//}
